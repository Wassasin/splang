Prog		:= Decl+
Decl		:= VarDecl | FunDecl
VarDecl		:= Type id '=' Exp ';'
FunDecl		:= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType		:= Type | 'Void'
Type		:= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs		:= Type id | Type id ',' Fargs

Stmt		:= '{' Stmt* '}'
			 | 'if' '(' Exp ')' Stmt
			 | 'if' '(' Exp ')' Stmt 'else' Stmt
			 | 'while' '(' Exp ')' Stmt
			 | id '=' Exp ';'
			 | Exp ';'
			 | 'return' Exp ';'

Exp		:= Term0

Term0		:= Term1 | Term1 Op2Bool Term0

Term1		:= Term2 | Term2 Op2Equal Term1

Term2		:= Term3 | OpNot Term2

Term3		:= Term4 | Term4 OpCons Term3

Term4		:= Term5
			 | Term5 Term4b

Term4b		:= Op2Add Term5 Term4b
			 | \epsilon

Term5		:= Term6
			 | Term6 Term5b

Term5b		:= Op2Mult Term6 Term5b
			 | \epsilon
			 
Term6		:= OpNegative Term6
			 | Term7

Term7		:= int
			 | '(' Exp ')'
			 | '(' Exp ',' Exp ')'
			 | 'False'
			 | 'True'
			 | id
			 | FunCall
			 | '[]'

FunCall		:= id '(' [ ActArgs ] ')'

ActArgs		:= Exp | Exp ',' ActArgs

Op2Mult			:= '*' | '/' | '%'
Op2Add			:= '+' | '-'
Op2Cons			:= ':'
Op2Equal		:= '==' | '<' | '>' | '<=' | '>=' | '!='
Op2Bool			:= '&&' | '||'

OpNot			:= '!'
OpNegative		:= '-'

int			:= digit+

id			:= alpha
			 | alpha id`

id`			:= id` '_' | id` alphaNum
