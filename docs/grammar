Prog		:= Decl+
Decl		:= VarDecl | FunDecl
VarDecl		:= Type id '=' Exp ';'
FunDecl		:= RetType id '(' [ FArgs ] ')' '{' VarDecl* Stmt+ '}'
RetType		:= Type | 'Void'
Type		:= 'Int' | 'Bool' | '(' Type ',' Type ')' | '[' Type ']' | id
FArgs		:= Type id | Type id ',' Fargs

Stmt		:= '{' Stmt* '}'
			 | 'if' '(' Exp ')' Stmt
			 | 'if' '(' Exp ')' Stmt 'else' Stmt
			 | 'while' '(' Exp ')' Stmt
			 | id '=' Exp ';'
			 | FunCall ';'
			 | 'return' Exp ';'

Exp			:= Term1

FunCall		:= id '(' ')'
			 | id '(' ActArgs ')'

ActArgs		:= Exp | Exp ',' ActArgs

Term1		:= Term2 Op2Bool Term1
			 | OpNot Term1
			 | Term2

Term2		:= Term3 Op2Equal Term2
			 | Term3

Term3		:= Term4
			 | Term4 Term3b

Term3b		:= Op2Add Term4 Term3b
			 | \epsilon

Term4		:= Term5
			 | Term5 Term4b

Term4b		:= Op2Mult Term5 Term4b
			 | \epsilon
			 
Term5		:= OpNegative Term5
			 | Term6

Term6		:= id Op2Mult Term4
			 | id
			 | int
			 | '(' Exp ')'
			 | 'False'
			 | 'True'
			 | FunCall
			 | '[]'
			 | '(' Exp ',' Exp ')'

Op2Mult			:= '*' | '/' | '%'
Op2Add			:= '+' | '-' | ':'
Op2Equal		:= '==' | '<' | '>' | '<=' | '>=' | '!='
Op2Bool			:= '&&' | '||'

OpNot			:= '!'
OpNegative		:= '-'

int			:= digit+
			 | '-' digit+

id			:= alpha
			 | alpha id`

id`			:= id` '_' | id` alphaNum
